@model CourseListViewModel    //rende fortemente tipizzata la view su tutta la classe CourseListViewModel
<div class="row">
    <div class="col-md-8">
        <h1>@ViewData["Title"] 
        <a class="btn btn-outline-primary btn-sm" asp-action="Create"><i class="fa fa-plus"></i>Crea nuovo</a></h1>
    </div>
    <div class="col-md-4 d-flex align-items-center">
        <form asp-asp-controller="Courses" asp-action="Index" method="Get"><!--Action Index del CoursesController, get invia tramite querystring -->
            <div class="input-group">
                <input type="text" name="search" class="form-control" placeholder="Cerca ..." aria-label="Cerca..." aria-describedby="search-button" value="@Model.Input.Search">   
                <!--search: nome della chiave digitato dall'utente e visibile nel link, model.input.search mi permette di vedere nel form il valore che ho cercato -->
                <div class="input-group-append">
                    <button class="input-group-text" id="search-button"><i class="fas fa-search"></i></button>
                </div>
            </div>
        </form>
    </div>
</div>

<div class="row">
    <!--@Model.Input.Search mi permette di evitare che la chiave di ricerca vada persa-->
    <!--Se il campo OrderBy del Model.Input = Title, mi devi restituire un senso invertito (!Model.Input.Ascending), altrimenti restituiscimi true-->
    <!--Se il mio tipo di ordine é uguale a Title: se la visualizzazione é ascending, stampami la freccia "up", altrimenti "down"-->
    <div class="col-md-1"></div>
    <!--<div class="col-md-5"><a asp-route-orderby="Title" asp-route-ascending="@(Model.Input.OrderBy == "Title" ? !Model.Input.Ascending : true)" asp-route-search="@Model.Input.Search">Titolo @if(Model.Input.OrderBy == "Title") {<i class="fas fa-caret-@(Model.Input.Ascending ? "up" : "down")"></i> }</a></div>
    <div class="col-md-2"><a asp-route-orderby="Rating" asp-route-ascending="@(Model.Input.OrderBy == "Rating" ? !Model.Input.Ascending : true)" asp-route-search="@Model.Input.Search">Valutazione @if(Model.Input.OrderBy == "Rating") {<i class="fas fa-caret-@(Model.Input.Ascending ? "up" : "down")"></i> }</a></div>
    <div class="col-md-2"><a asp-route-orderby="CurrentPrice" asp-route-ascending="@(Model.Input.OrderBy == "CurrentPrice" ? !Model.Input.Ascending : true)" asp-route-search="@Model.Input.Search">Prezzo @if(Model.Input.OrderBy == "CurrentPrice") {<i class="fas fa-caret-@(Model.Input.Ascending ? "up" : "down")"></i> }</a></div>-->

    <div class="col-md-5"><order-link order-by="Title" Input="Model.Input">Titolo</order-link></div>
    <div class="col-md-2"><order-link order-by="Rating" Input="Model.Input">Valutazione</order-link></div>
    <div class="col-md-2"><order-link order-by="CurrentPrice" Input="Model.Input">Prezzo</order-link></div>

    <div class="col-md-2"></div>
</div>

@foreach(CourseViewModel course in Model.Courses.Results) //foreach produce il codice a seguire per ogni corso trovato all'interno del Model
{                                                           //richiama gli elementi presenti in CourseViewModel 
    <partial name="Courses/_CourseLine" model="@course"></partial>
}

<!--Richiamiamo il ViewComponent (@Model ci restituisce un oggetto di tipo CourseListViewModel)-->
<vc:pagination-bar model="@Model"></vc:pagination-bar>




